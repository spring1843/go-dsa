package backtracking

import (
	"reflect"
	"testing"
)

func TestSudoku(t *testing.T) {
	tests := []struct {
		board    [][]int
		solution [][]int
	}{
		{
			board: [][]int{
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
			},
			solution: [][]int{
				{1, 2, 3, 4, 5, 6, 7, 8, 9},
				{4, 5, 6, 7, 8, 9, 1, 2, 3},
				{7, 8, 9, 1, 2, 3, 4, 5, 6},
				{2, 1, 4, 3, 6, 5, 8, 9, 7},
				{3, 6, 5, 8, 9, 7, 2, 1, 4},
				{8, 9, 7, 2, 1, 4, 3, 6, 5},
				{5, 3, 1, 6, 4, 2, 9, 7, 8},
				{6, 4, 2, 9, 7, 8, 5, 3, 1},
				{9, 7, 8, 5, 3, 1, 6, 4, 2},
			},
		},
		{
			board: [][]int{
				{1, 0, 6, 0, 0, 2, 3, 0, 0},
				{0, 5, 0, 0, 0, 6, 0, 9, 1},
				{0, 0, 9, 5, 0, 1, 4, 6, 2},
				{0, 3, 7, 9, 0, 5, 0, 0, 0},
				{5, 8, 1, 0, 2, 7, 9, 0, 0},
				{0, 0, 0, 4, 0, 8, 1, 5, 7},
				{0, 0, 0, 2, 6, 0, 5, 4, 0},
				{0, 0, 4, 1, 5, 0, 6, 0, 9},
				{9, 0, 0, 8, 7, 4, 2, 1, 0},
			},
			solution: [][]int{
				{1, 4, 6, 7, 9, 2, 3, 8, 5},
				{2, 5, 8, 3, 4, 6, 7, 9, 1},
				{3, 7, 9, 5, 8, 1, 4, 6, 2},
				{4, 3, 7, 9, 1, 5, 8, 2, 6},
				{5, 8, 1, 6, 2, 7, 9, 3, 4},
				{6, 9, 2, 4, 3, 8, 1, 5, 7},
				{7, 1, 3, 2, 6, 9, 5, 4, 8},
				{8, 2, 4, 1, 5, 3, 6, 7, 9},
				{9, 6, 5, 8, 7, 4, 2, 1, 3},
			},
		},
		{
			board: [][]int{
				{3, 0, 0, 8, 0, 1, 0, 0, 6},
				{0, 0, 4, 2, 0, 5, 9, 0, 0},
				{0, 5, 0, 0, 0, 0, 0, 8, 0},
				{0, 7, 8, 1, 0, 9, 5, 6, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 6, 2, 7, 0, 4, 1, 3, 0},
				{0, 4, 0, 0, 0, 0, 0, 2, 0},
				{0, 0, 3, 5, 0, 7, 6, 0, 0},
				{0, 0, 0, 4, 0, 0, 0, 0, 1},
			},
			solution: [][]int{
				{3, 2, 7, 8, 9, 1, 4, 5, 6},
				{6, 8, 4, 2, 7, 5, 9, 1, 3},
				{1, 5, 9, 3, 4, 6, 2, 8, 7},
				{4, 7, 8, 1, 3, 9, 5, 6, 2},
				{5, 3, 1, 6, 2, 8, 7, 4, 9},
				{9, 6, 2, 7, 5, 4, 1, 3, 8},
				{7, 4, 6, 9, 1, 3, 8, 2, 5},
				{2, 1, 3, 5, 8, 7, 6, 9, 4},
				{8, 9, 5, 4, 6, 2, 3, 7, 1},
			},
		},
		{
			board: [][]int{
				{0, 0, 0, 8, 0, 1, 0, 5, 0},
				{6, 0, 4, 2, 0, 5, 9, 0, 0},
				{0, 5, 0, 0, 0, 0, 0, 0, 7},
				{0, 7, 8, 1, 0, 9, 5, 6, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 6, 2, 7, 0, 4, 1, 3, 0},
				{0, 0, 0, 0, 0, 0, 0, 2, 0},
				{0, 1, 3, 5, 8, 0, 0, 9, 0},
				{0, 0, 0, 4, 0, 0, 0, 0, 1},
			},
			solution: [][]int{
				{3, 2, 7, 8, 9, 1, 4, 5, 6},
				{6, 8, 4, 2, 7, 5, 9, 1, 3},
				{1, 5, 9, 3, 4, 6, 2, 8, 7},
				{4, 7, 8, 1, 3, 9, 5, 6, 2},
				{5, 3, 1, 6, 2, 8, 7, 4, 9},
				{9, 6, 2, 7, 5, 4, 1, 3, 8},
				{7, 4, 6, 9, 1, 3, 8, 2, 5},
				{2, 1, 3, 5, 8, 7, 6, 9, 4},
				{8, 9, 5, 4, 6, 2, 3, 7, 1},
			},
		},
	}

	for i, test := range tests {
		if Sudoku(test.board); !reflect.DeepEqual(test.solution, test.board) {
			t.Fatalf("Failed test case #%d. Want %#v got %#v", i, test.solution, test.board)
		}
	}
}
